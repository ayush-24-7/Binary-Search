class Solution {
public:


    int ispossible(int n,int k, vector<int>&stalls,int cap){
        int count=1;
        int lastpos=stalls[0];
        for(int i=1;i<n;i++){
        if(stalls[i]-lastpos>=cap){
            count++;
            lastpos= stalls[i];
        }
        if (count>=k){
            return true;
        }
        
        }
            return false;
        }
    int solve(int n, int k, vector<int> &stalls) {
    
        sort(stalls.begin(),stalls.end());
        int s=1;
        int e = stalls[n-1]-stalls[0];
        int ans = -1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(ispossible(n,k,stalls,mid)==true){
                ans=mid;
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return ans;
    }
};
